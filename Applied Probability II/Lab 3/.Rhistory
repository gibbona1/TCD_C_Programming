?rnorm
n <- 100
x <- rnorm( n )
x <- rnorm(n, mean = 3, sd = 1.5)
n <- 500100
x <- rnorm(n, mean = 3, sd = 1.5)
n <- 500
x <- rnorm(n, mean = 3, sd = 1.5)
x
save.image("Z:/Desktop/ST2005 APPLIED PROBABILITY II/Lab1_1.R.RData")
load("Z:/Desktop/ST2005 APPLIED PROBABILITY II/Lab1_1.R.RData")
n <- 500
x <- rnorm(n, mean = 3, sd = 1.5)
a<-100
b<-rpois(n,1)
b[51:100]
n <- 500
x <- rnorm(n, mean = 3, sd = 1.5)
a<-100
b<-rpois(a,1)
b[51:100]
x <- rnorm( 100 )
X <- matrix( x, nrow=10, ncol=10 )
X <- matrix( 400, nrow=20, ncol=20 )
c=(1,400)
X <- matrix( c, nrow=20, ncol=20 )
c<-(1:400)
X <- matrix( c, nrow=20, ncol=20 )
c<-(1:400)
X <- matrix( c, nrow=20, ncol=20 )
View(X)
X<-matrix( c, nrow=20, ncol=20 )
m <- X * 3
m
X<-matrix( c, nrow=20, ncol=20 )
m <- X * 3
p <- m+2
p
X<-matrix( c, nrow=2, ncol=2 )
K<-matrix(c,nrow=2,ncol=5)
for( k in length(x)-1:length(x) )
{
K[k] <- X[k]
}
K
X<-matrix( c, nrow=2, ncol=2 )
K<-matrix(c,nrow=2,ncol=5)
for( k in ncol(X)-1:ncol(X) )
{
K[k] <- X[k]
}
K
X<-matrix( (1,2,3,4), nrow=2, ncol=2 )
X<-matrix( 1:3, nrow=2, ncol=2 )
X<-matrix( 1:2, nrow=2, ncol=2 )
K<-matrix(c,nrow=2,ncol=5)
for( k in ncol(X)-1:ncol(X) )
{
K[k] <- X[k]
}
K
#Question 5
X<-<- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)
#Question 5
X<-matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)
K<-matrix(c,nrow=2,ncol=5)
for( k in ncol(X)-1:ncol(X) )
{
K[k] <- X[k]
}
K
#Question 5
X<-matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)
K<-matrix(c(1,1,1,1,1, 1,1,1,1,1),nrow=2,ncol=5)
for( k in ncol(X)-1:ncol(X) )
{
K[k] <- X[k]
}
K
K<-matrix(c(1,1,1,1,1, 1,1,1,1,1),nrow=2,ncol=5)
K
K[1,2]
K[1,]
K[,1]
K[,c(1, 2)]
test <- K[,c(1, 2)]
test
test <- K[,c(ncol(X), ncol(X)-1)]
test
x<-rnorm(50,0,1)
x.var<-var(x)
alpha<-0.95
CIfunc <- function(x, alpha, x.var)
{
# find the number of elements in x
n <- length(x)
# calculate the mean of x
x.mean <- mean(x)
# appropriate z-value
z <- qnorm(1-alpha/2)
Low <- x.mean - z*sqrt(x.var/n) # lower bound
High <- x.mean + z*sqrt(x.var/n) # upper bound
# return confidence interval as a vector
return(c(Low, High))
}
x<-rnorm(50,0,1)
x.var<-var(x)
alpha<-0.95
CIfunc <- function(x, alpha, x.var)
{
# find the number of elements in x
n <- length(x)
# calculate the mean of x
x.mean <- mean(x)
# appropriate z-value
z <- qnorm(1-alpha/2)
Low <- x.mean - z*sqrt(x.var/n) # lower bound
High <- x.mean + z*sqrt(x.var/n) # upper bound
# return confidence interval as a vector
return(c(Low, High))
}
CIfunc(x, alpha, x.var)
CIfunc(x, 0.95, x.var)
CIfunc(x, 0.99, x.var)
#Q2
m <- 100000
n <- 15
Samples <- function(m,n)
{
matrix( rnorm( m*n ), nrow=m, ncol=n, byrow=TRUE )
}
Samples <- Samples(m,n)
CIfunc(x, 0.1, x.var)
CIfunc(x, 0.05, x.var)
CIfunc(x, 0.01, x.var)
Samples(m,n)
Samples <- function(m,n)
{
matrix( rnorm( m*n ), nrow=m, ncol=n, byrow=TRUE )
}
Samples <- Samples(m,n)
Samples(m,n)
Samples
Percent <- function( X ) {
CIs <- matrix( nrow=nrow(X), ncol=2 )
for( k in 1:nrow(X) ) CIs[k, ] <- CIfunc( X[k,], 0.05 , 1)
z <- ( CIs[,1] < 0 ) * ( CIs[ , 2 ] > 0)
sum(z)/nrow(X)
}
Percent(Samples)
#Q1
x<-rnorm(50,0,1)
x.var<-var(x)
CIfunc <- function(x, alpha, x.var)
{
# find the number of elements in x
n <- length(x)
# calculate the mean of x
x.mean <- mean(x)
# appropriate z-value
z <- qnorm(1-alpha/2)
Low <- x.mean - z*sqrt(x.var/n) # lower bound
High <- x.mean + z*sqrt(x.var/n) # upper bound
# return confidence interval as a vector
return(c(Low, High))
}
CIfunc(x, 0.1, x.var)
CIfunc(x, 0.05, x.var)
CIfunc(x, 0.01, x.var)
#Q2
m <- 100000
n <- 15
Samples <- function(m,n)
{
matrix( rnorm( m*n ), nrow=m, ncol=n, byrow=TRUE )
}
Samp <- Samples(m,n)
Samp
Percent <- function( X ) {
CIs <- matrix( nrow=nrow(X), ncol=2 )
for( k in 1:nrow(X) ) CIs[k, ] <- CIfunc( X[k,], 0.05 , 1)
z <- ( CIs[,1] < 0 ) * ( CIs[ , 2 ] > 0)
sum(z)/nrow(X)
}
Percent(Samp)
#Q3
RowVar <- function(x, ...) {
rowSums((x - rowMeans(x, ...))^2, ...)/(dim(x)[2] - 1)
}
row.var<-RowVar(Samp)
row.var<-RowVar(Samp)
CIfunc(Samp, 0.05, row.var)
CIfunc(Samp[1,], 0.05, row.var[1,])
CIfunc(Samp[1,], 0.05, row.var[1])
Percent(SampCI)
SampCI<-CIfunc(Samp[1,], 0.05, row.var[1])
Percent(SampCI)
SampCI<-CIfunc(Samp, 0.05, row.var)
Percent(SampCI)
row.var<-RowVar(Samp)
for(i in 1:10)
{
SampCI<-CIfunc(Samp[i,], 0.05, row.var[i])
Percent(SampCI)
}
#Q4
df<-n-1
qt(1-alpha/2, df)
alpha<-0.1
qt(1-alpha/2, df)
row.mean <- rowMeans(x, ...)
row.mean <- rowMeans(Samp)
row.var<-RowVar(Samp)
CIfunc(row.mean, 0.05, row.var)
Percent(SampCI)
ppdat <- read.csv( file=“power_plant.csv” )
ppdat <- read.csv( file=“\\taughtstore.scss.tcd.ie\gibbona1\Desktop\ST2005 APPLIED PROBABILITY II\Lab 3\power_plant.csv” )
ppdat <- read.csv( file=“\\taughtstore.scss.tcd.ie\gibbona1\Desktop\ST2005 APPLIED PROBABILITY II\Lab 3\power_plant.csv” )
library(readxl)
Lab_3 <- read_excel("\\\\taughtstore.scss.tcd.ie\\gibbona1\\Desktop\\ST2005 APPLIED PROBABILITY II\\Lab 3")
View(Lab_3)
setwd("Z:/Desktop/ST2005 APPLIED PROBABILITY II/Lab 3")
ppdat <- read.csv( file=“power_plant.csv” )
ppdat <- read.csv( file=“power_plant.csv” )
ppdat <- read.csv( file=“power_plant.csv” )
ppdat <- read.csv( file=“power_plant.csv”, header = TRUE, sep = "," )
setwd("Z:/Desktop/ST2005 APPLIED PROBABILITY II/Lab 3")
ppdat <- read.csv( file=“power_plant.csv”)
ppdat <- read.csv(file="power_plant.csv")
head(ppdat)
names(ppdat)
#Reading in the dataset
ppdat <- read.csv(file="power_plant.csv")
#Prints out the first few lines of the dataset
head(ppdat)
#Finds the names of the variables in the dataset
names(ppdat)
ppdat$PE
#plotting data
pairs(ppdat)
#Change the plotting symbol, by using pch=20 to the pairs function. Change the colour of col=”blue”.
pairs(ppdat, pch=20, col="blue")
#Single plot
plot( x=ppdat$AT, y=ppdat$PE )
#Changes the plotting symbol and the colour of the points
plot( x=ppdat$AT, y=ppdat$PE , pch=20, col="blue")
#Add xlab, ylab and main
plot( x=ppdat$AT, y=ppdat$PE , pch=20, col="blue",xlab, ylab, main)
#Add xlab, ylab and main
plot( x=ppdat$AT, y=ppdat$PE , pch=20, col="blue",xlab="Temperature", ylab="net hourly electrical energy output", main="Table")
#Add x-axis, y-axis and Title
plot( x=ppdat$AT, y=ppdat$PE , pch=20, col="blue",xlab="Temperature (°C)", ylab="Net Hourly Electrical Energy Output", main="Table 1")
#Fitting a regression model
mod.fit <- lm( PE ~ AT, data=ppdat )
#Fitting a regression model
mod.fit <- lm( PE ~ AT, data=ppdat )+ AP
#Fitting a regression model
mod.fit <- lm( PE ~ AT+ AP, data=ppdat )
#
#checks the model output by using
summary( mod.fit )
mod.all <- lm( PE ~ AT + AP + V + RH, data=ppdat )
summary( mod.all )
